// Code generated by MockGen. DO NOT EDIT.
// Source: internal/module/workflow/workflow.go

// Package mock_workflow is a generated GoMock package.
package mock_workflow

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	echo "github.com/labstack/echo/v4"
	dto "github.com/rohanchauhan02/sequence-service/internal/dto"
	models "github.com/rohanchauhan02/sequence-service/internal/models"
	gorm "gorm.io/gorm"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateSequence mocks base method.
func (m *MockUsecase) CreateSequence(c echo.Context, req *dto.CreateSequenceRequest) (*dto.CreateSequenceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSequence", c, req)
	ret0, _ := ret[0].(*dto.CreateSequenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSequence indicates an expected call of CreateSequence.
func (mr *MockUsecaseMockRecorder) CreateSequence(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSequence", reflect.TypeOf((*MockUsecase)(nil).CreateSequence), c, req)
}

// DeleteStep mocks base method.
func (m *MockUsecase) DeleteStep(c echo.Context, sequenceID, stepID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStep", c, sequenceID, stepID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStep indicates an expected call of DeleteStep.
func (mr *MockUsecaseMockRecorder) DeleteStep(c, sequenceID, stepID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStep", reflect.TypeOf((*MockUsecase)(nil).DeleteStep), c, sequenceID, stepID)
}

// GetSequence mocks base method.
func (m *MockUsecase) GetSequence(c echo.Context, sequenceID uuid.UUID) (*models.Sequence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSequence", c, sequenceID)
	ret0, _ := ret[0].(*models.Sequence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSequence indicates an expected call of GetSequence.
func (mr *MockUsecaseMockRecorder) GetSequence(c, sequenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSequence", reflect.TypeOf((*MockUsecase)(nil).GetSequence), c, sequenceID)
}

// UpdateSequenceTracking mocks base method.
func (m *MockUsecase) UpdateSequenceTracking(c echo.Context, sequenceID uuid.UUID, req *dto.UpdateSequenceTrackingRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSequenceTracking", c, sequenceID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSequenceTracking indicates an expected call of UpdateSequenceTracking.
func (mr *MockUsecaseMockRecorder) UpdateSequenceTracking(c, sequenceID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSequenceTracking", reflect.TypeOf((*MockUsecase)(nil).UpdateSequenceTracking), c, sequenceID, req)
}

// UpdateStep mocks base method.
func (m *MockUsecase) UpdateStep(c echo.Context, sequenceID, stepID uuid.UUID, req *dto.UpdateStepRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStep", c, sequenceID, stepID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStep indicates an expected call of UpdateStep.
func (mr *MockUsecaseMockRecorder) UpdateStep(c, sequenceID, stepID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStep", reflect.TypeOf((*MockUsecase)(nil).UpdateStep), c, sequenceID, stepID, req)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateSequence mocks base method.
func (m *MockRepository) CreateSequence(tx *gorm.DB, sequence *models.Sequence) (*models.Sequence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSequence", tx, sequence)
	ret0, _ := ret[0].(*models.Sequence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSequence indicates an expected call of CreateSequence.
func (mr *MockRepositoryMockRecorder) CreateSequence(tx, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSequence", reflect.TypeOf((*MockRepository)(nil).CreateSequence), tx, sequence)
}

// CreateSteps mocks base method.
func (m *MockRepository) CreateSteps(tx *gorm.DB, steps []models.Step) (*[]models.Step, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSteps", tx, steps)
	ret0, _ := ret[0].(*[]models.Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSteps indicates an expected call of CreateSteps.
func (mr *MockRepositoryMockRecorder) CreateSteps(tx, steps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSteps", reflect.TypeOf((*MockRepository)(nil).CreateSteps), tx, steps)
}

// DeleteStep mocks base method.
func (m *MockRepository) DeleteStep(tx *gorm.DB, sequenceID, stepID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStep", tx, sequenceID, stepID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStep indicates an expected call of DeleteStep.
func (mr *MockRepositoryMockRecorder) DeleteStep(tx, sequenceID, stepID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStep", reflect.TypeOf((*MockRepository)(nil).DeleteStep), tx, sequenceID, stepID)
}

// GetSequence mocks base method.
func (m *MockRepository) GetSequence(sequenceID uuid.UUID) (*models.Sequence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSequence", sequenceID)
	ret0, _ := ret[0].(*models.Sequence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSequence indicates an expected call of GetSequence.
func (mr *MockRepositoryMockRecorder) GetSequence(sequenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSequence", reflect.TypeOf((*MockRepository)(nil).GetSequence), sequenceID)
}

// GetStepByID mocks base method.
func (m *MockRepository) GetStepByID(sequenceID, stepID uuid.UUID) (*models.Step, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStepByID", sequenceID, stepID)
	ret0, _ := ret[0].(*models.Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStepByID indicates an expected call of GetStepByID.
func (mr *MockRepositoryMockRecorder) GetStepByID(sequenceID, stepID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepByID", reflect.TypeOf((*MockRepository)(nil).GetStepByID), sequenceID, stepID)
}

// UpdateSequenceTracking mocks base method.
func (m *MockRepository) UpdateSequenceTracking(tx *gorm.DB, sequence *models.Sequence) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSequenceTracking", tx, sequence)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSequenceTracking indicates an expected call of UpdateSequenceTracking.
func (mr *MockRepositoryMockRecorder) UpdateSequenceTracking(tx, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSequenceTracking", reflect.TypeOf((*MockRepository)(nil).UpdateSequenceTracking), tx, sequence)
}

// UpdateStep mocks base method.
func (m *MockRepository) UpdateStep(tx *gorm.DB, sequence *models.Step) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStep", tx, sequence)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStep indicates an expected call of UpdateStep.
func (mr *MockRepositoryMockRecorder) UpdateStep(tx, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStep", reflect.TypeOf((*MockRepository)(nil).UpdateStep), tx, sequence)
}
